{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Calvin\\\\Documents\\\\FakeStore\\\\src\\\\component\\\\commons\\\\SearchFilterMap.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport Card from 'antd/lib/card';\nimport Empty from 'antd/lib/empty';\nimport Input from 'antd/lib/input';\nimport Form from 'antd/lib/form';\nimport Button from 'antd/lib/button';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst {\n  Search\n} = Input;\nexport default function SearchFilterMapComponent(props) {\n  _s();\n\n  const [searchParam, setParam] = useState('');\n  const [minNum, setMin] = useState(0);\n  const [maxNum, setMax] = useState(0);\n\n  const SearchFilterMap = (item, searchParam, minRange, maxRange) => {\n    //handles if somehow item has no data, as usestate is an empty array by default\n    if (item.length === 0) {\n      return /*#__PURE__*/_jsxDEV(Card.Grid, {\n        children: /*#__PURE__*/_jsxDEV(Empty, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 22,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 21,\n        columnNumber: 17\n      }, this);\n    }\n\n    return item.map((item, index) => {\n      if (item.title.toLowerCase().includes(searchParam.toLowerCase())) {\n        // lowercases both title and search value, and searches by a partial word not by whole word\n        //If price is (greater than or equal) minimum number AND (price is less than or equal to maximum number OR max range is not set)\n        if (item.price >= minRange && (item.price <= maxRange || maxRange === 0)) {\n          return /*#__PURE__*/_jsxDEV(Card.Grid, {\n            children: [/*#__PURE__*/_jsxDEV(\"img\", {\n              style: {\n                width: \"100%\"\n              },\n              alt: \"example\",\n              src: item.image\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 32,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n              children: /*#__PURE__*/_jsxDEV(\"strong\", {\n                children: item.title\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 33,\n                columnNumber: 32\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 33,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n              children: \"$\" + item.price.toFixed(2)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 34,\n              columnNumber: 29\n            }, this), \" \", /*#__PURE__*/_jsxDEV(\"p\", {\n              children: item.category.charAt(0).toUpperCase() + item.category.slice(1)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 35,\n              columnNumber: 29\n            }, this), \" \", /*#__PURE__*/_jsxDEV(\"p\", {\n              children: item.description\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 36,\n              columnNumber: 29\n            }, this)]\n          }, index, true, {\n            fileName: _jsxFileName,\n            lineNumber: 31,\n            columnNumber: 25\n          }, this);\n        } else {\n          return null;\n        }\n      } else {\n        return null;\n      }\n    });\n  }; //Handles search by title\n\n\n  const onSearch = value => setParam(value); //Handles product filter\n\n\n  const onFinish = values => {\n    if (values.min === undefined || values.min === \"\") {\n      setMin(0); //sets a num if left blank, to prevent errors\n    } else {\n      setMin(Number(parseFloat(values.min))); //sets product's lowest value, decimal for precise filter\n    }\n\n    if (values.max === undefined || values.max === \"\") {\n      setMax(0); //sets a num if left blank, to prevent errors\n    } else {\n      setMax(Number(parseFloat(values.max))); //sets product's highest value, decimal for precise filter\n    }\n  };\n\n  if (props.data === undefined) {\n    return /*#__PURE__*/_jsxDEV(Empty, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 13\n    }, this);\n  } else {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"card\",\n      children: [/*#__PURE__*/_jsxDEV(Search, {\n        className: \"search-bar\",\n        placeholder: \"Search By Name\",\n        onSearch: onSearch,\n        style: {\n          width: \"25%\"\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Form, {\n        className: \"filter-price\",\n        layout: \"inline\",\n        onFinish: onFinish,\n        children: [/*#__PURE__*/_jsxDEV(Form.Item, {\n          name: \"min\",\n          children: /*#__PURE__*/_jsxDEV(Input, {\n            placeholder: \"Minimum Product Range\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 72,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 71,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Form.Item, {\n          name: \"max\",\n          children: /*#__PURE__*/_jsxDEV(Input, {\n            placeholder: \"Maximum Product Range\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 75,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 74,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Button, {\n          type: \"primary\",\n          htmlType: \"submit\",\n          children: \"Filter by Price\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 77,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Card, {\n        className: \"card-grid\",\n        title: \"Card Title\",\n        children: SearchFilterMap(props.data, searchParam, minNum, maxNum)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 13\n    }, this);\n  }\n}\n\n_s(SearchFilterMapComponent, \"bLzv31VPrMVcPa9ePr7KFnGS7z0=\");\n\n_c = SearchFilterMapComponent;\n\nvar _c;\n\n$RefreshReg$(_c, \"SearchFilterMapComponent\");","map":{"version":3,"sources":["C:/Users/Calvin/Documents/FakeStore/src/component/commons/SearchFilterMap.js"],"names":["React","useState","Card","Empty","Input","Form","Button","Search","SearchFilterMapComponent","props","searchParam","setParam","minNum","setMin","maxNum","setMax","SearchFilterMap","item","minRange","maxRange","length","map","index","title","toLowerCase","includes","price","width","image","toFixed","category","charAt","toUpperCase","slice","description","onSearch","value","onFinish","values","min","undefined","Number","parseFloat","max","data"],"mappings":"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","sourcesContent":["import React, { useState } from 'react'\r\n\r\nimport Card from 'antd/lib/card'\r\nimport Empty from 'antd/lib/empty'\r\nimport Input from 'antd/lib/input'\r\nimport Form from 'antd/lib/form'\r\nimport Button from 'antd/lib/button'\r\n\r\n\r\nconst { Search } = Input\r\n\r\nexport default function SearchFilterMapComponent(props) {\r\n    const [searchParam, setParam] = useState('')\r\n    const [minNum, setMin] = useState(0)\r\n    const [maxNum, setMax] = useState(0)\r\n\r\n    const SearchFilterMap = (item, searchParam, minRange, maxRange) => {\r\n        //handles if somehow item has no data, as usestate is an empty array by default\r\n        if (item.length === 0) {\r\n            return (\r\n                <Card.Grid>\r\n                    <Empty />\r\n                </Card.Grid>\r\n            )\r\n        }\r\n        return item.map((item, index) => {\r\n            if ((item.title.toLowerCase()).includes(searchParam.toLowerCase())) {// lowercases both title and search value, and searches by a partial word not by whole word\r\n                //If price is (greater than or equal) minimum number AND (price is less than or equal to maximum number OR max range is not set)\r\n                if (item.price >= minRange && (item.price <= maxRange || maxRange === 0)) {\r\n                    return (\r\n                        <Card.Grid key={index}>\r\n                            <img style={{ width: \"100%\" }} alt=\"example\" src={item.image} />\r\n                            <p><strong>{item.title}</strong></p>\r\n                            <p>{\"$\" + item.price.toFixed(2)}</p> {/* Integer must have 2 decimal spaces to look better */}\r\n                            <p>{item.category.charAt(0).toUpperCase() + item.category.slice(1)}</p> {/* Capitalize First Letter */}\r\n                            <p>{item.description}</p>\r\n                        </Card.Grid>\r\n                    )\r\n                } else { return null }\r\n            } else {\r\n                return null\r\n            }\r\n        })\r\n    }\r\n\r\n    //Handles search by title\r\n    const onSearch = value => setParam(value);\r\n\r\n    //Handles product filter\r\n    const onFinish = (values) => {\r\n        if (values.min === undefined || values.min === \"\") {\r\n            setMin(0)//sets a num if left blank, to prevent errors\r\n        } else {\r\n            setMin(Number(parseFloat(values.min)))//sets product's lowest value, decimal for precise filter\r\n        }\r\n        if (values.max === undefined || values.max === \"\") {\r\n            setMax(0)//sets a num if left blank, to prevent errors\r\n        } else {\r\n            setMax(Number(parseFloat(values.max)))//sets product's highest value, decimal for precise filter\r\n        }\r\n    };\r\n    if (props.data === undefined) {\r\n        return (\r\n            <Empty />\r\n        )\r\n    } else {\r\n        return (\r\n            <div className=\"card\">\r\n                <Search className=\"search-bar\" placeholder=\"Search By Name\" onSearch={onSearch} style={{ width: \"25%\" }} />\r\n                <Form className=\"filter-price\" layout=\"inline\" onFinish={onFinish}>\r\n                    <Form.Item name=\"min\">\r\n                        <Input placeholder=\"Minimum Product Range\" />\r\n                    </Form.Item>\r\n                    <Form.Item name=\"max\">\r\n                        <Input placeholder=\"Maximum Product Range\" />\r\n                    </Form.Item>\r\n                    <Button type=\"primary\" htmlType=\"submit\">Filter by Price</Button>\r\n                </Form>\r\n                <Card className=\"card-grid\" title=\"Card Title\">\r\n                    {SearchFilterMap(props.data, searchParam, minNum, maxNum)}\r\n                </Card>\r\n            </div>\r\n        )\r\n    }\r\n}"]},"metadata":{},"sourceType":"module"}