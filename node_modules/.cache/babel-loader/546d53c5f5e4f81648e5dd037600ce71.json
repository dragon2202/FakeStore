{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Calvin\\\\Documents\\\\FakeStore\\\\src\\\\component\\\\commons\\\\SearchFilterMap.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport Card from 'antd/lib/card';\nimport Empty from 'antd/lib/empty';\nimport Input from 'antd/lib/input';\nimport Form from 'antd/lib/form';\nimport Button from 'antd/lib/button';\nimport Menu from 'antd/lib/menu';\nimport Dropdown from 'antd/lib/dropdown';\nimport DownOutlined from '@ant-design/icons/DownOutlined';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst {\n  Search\n} = Input;\nexport default function SearchFilterMapComponent(props) {\n  _s();\n\n  const [searchParam, setParam] = useState('');\n  const [minNum, setMin] = useState(0);\n  const [maxNum, setMax] = useState(0);\n  const [selectedCategory, setCategory] = useState(''); //Handles the combination of Search and Filtering\n\n  const SearchFilterMap = (item, searchParam, minRange, maxRange, selectedCategory) => {\n    //handles if somehow item has no data, as usestate is an empty array by default\n    if (item.length === 0) {\n      return /*#__PURE__*/_jsxDEV(Card.Grid, {\n        children: /*#__PURE__*/_jsxDEV(Empty, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 26,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 25,\n        columnNumber: 17\n      }, this);\n    }\n\n    return item.map((item, index) => {\n      if (item.title.toLowerCase().includes(searchParam.toLowerCase())) {\n        // lowercases both title and search value, and searches by a partial word not by whole word\n        if (item.category === selectedCategory || selectedCategory === \"\") {\n          //If price is (greater than or equal) minimum number AND (price is less than or equal to maximum number OR max range is not set)\n          if (item.price >= minRange && (item.price <= maxRange || maxRange === 0)) {\n            return /*#__PURE__*/_jsxDEV(Card.Grid, {\n              children: [/*#__PURE__*/_jsxDEV(\"img\", {\n                style: {\n                  width: \"100%\"\n                },\n                alt: \"example\",\n                src: item.image\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 37,\n                columnNumber: 33\n              }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                children: /*#__PURE__*/_jsxDEV(\"strong\", {\n                  children: item.title\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 38,\n                  columnNumber: 36\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 38,\n                columnNumber: 33\n              }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                children: \"$\" + item.price.toFixed(2)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 39,\n                columnNumber: 33\n              }, this), \" \", /*#__PURE__*/_jsxDEV(\"p\", {\n                children: item.category.charAt(0).toUpperCase() + item.category.slice(1)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 40,\n                columnNumber: 33\n              }, this), \" \", /*#__PURE__*/_jsxDEV(\"p\", {\n                children: item.description\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 41,\n                columnNumber: 33\n              }, this)]\n            }, index, true, {\n              fileName: _jsxFileName,\n              lineNumber: 36,\n              columnNumber: 29\n            }, this);\n          } else {\n            return null;\n          }\n        } else {\n          return null;\n        }\n      } else {\n        return null;\n      }\n    });\n  }; //Handles search by title\n\n\n  const onSearch = value => setParam(value); //Handles Product Price filter after submitting\n\n\n  const onFinish = values => {\n    if (values.min === undefined || values.min === \"\") {\n      setMin(0); //sets a num if left blank, to prevent errors\n    } else {\n      setMin(Number(parseFloat(values.min))); //sets product's lowest value, decimal for precise filter\n    }\n\n    if (values.max === undefined || values.max === \"\") {\n      setMax(0); //sets a num if left blank, to prevent errors\n    } else {\n      setMax(Number(parseFloat(values.max))); //sets product's highest value, decimal for precise filter\n    }\n  }; // Functions for Dropdown--------------------------------------------------------------------------------------------->\n\n\n  const handleClick = value => {\n    setCategory(value);\n  };\n\n  const menu = product => {\n    return /*#__PURE__*/_jsxDEV(Menu, {\n      children: productMap(product)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 13\n    }, this);\n  }; //Creates a unique/distinct(non-duplicate) list of categories so that I can then filter by those unique categories\n\n\n  const productMap = item => {\n    const unique = [...new Set(item.map(item => item.category))];\n    return unique.map((item, index) => {\n      return /*#__PURE__*/_jsxDEV(Menu.Item, {\n        onClick: () => handleClick(item),\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          children: item\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 94,\n          columnNumber: 21\n        }, this)\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 93,\n        columnNumber: 17\n      }, this);\n    });\n  }; // Functions for Dropdown--------------------------------------------------------------------------------------------->\n\n\n  if (props.data === undefined) {\n    return /*#__PURE__*/_jsxDEV(Empty, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 106,\n      columnNumber: 13\n    }, this);\n  } else {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"card\",\n      children: [/*#__PURE__*/_jsxDEV(Search, {\n        className: \"search-bar\",\n        placeholder: \"Search By Name\",\n        onSearch: onSearch,\n        style: {\n          width: \"25%\"\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 111,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Form, {\n        className: \"filter-price\",\n        layout: \"inline\",\n        onFinish: onFinish,\n        children: [/*#__PURE__*/_jsxDEV(Form.Item, {\n          name: \"min\",\n          children: /*#__PURE__*/_jsxDEV(Input, {\n            placeholder: \"Minimum Product Range\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 115,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 114,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Form.Item, {\n          name: \"max\",\n          children: /*#__PURE__*/_jsxDEV(Input, {\n            placeholder: \"Maximum Product Range\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 118,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 117,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Button, {\n          type: \"primary\",\n          htmlType: \"submit\",\n          children: \"Filter by Price\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 120,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 113,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Dropdown, {\n        overlay: menu(props.data),\n        children: /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"ant-dropdown-link\",\n          children: [\"Hover me \", /*#__PURE__*/_jsxDEV(DownOutlined, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 125,\n            columnNumber: 34\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 124,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 123,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Card, {\n        className: \"card-grid\",\n        title: \"Card Title\",\n        children: SearchFilterMap(props.data, searchParam, minNum, maxNum, selectedCategory)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 129,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 110,\n      columnNumber: 13\n    }, this);\n  }\n}\n\n_s(SearchFilterMapComponent, \"Az8yMowO4AOxSu9FNEimL8lDtR8=\");\n\n_c = SearchFilterMapComponent;\n\nvar _c;\n\n$RefreshReg$(_c, \"SearchFilterMapComponent\");","map":{"version":3,"sources":["C:/Users/Calvin/Documents/FakeStore/src/component/commons/SearchFilterMap.js"],"names":["React","useState","Card","Empty","Input","Form","Button","Menu","Dropdown","DownOutlined","Search","SearchFilterMapComponent","props","searchParam","setParam","minNum","setMin","maxNum","setMax","selectedCategory","setCategory","SearchFilterMap","item","minRange","maxRange","length","map","index","title","toLowerCase","includes","category","price","width","image","toFixed","charAt","toUpperCase","slice","description","onSearch","value","onFinish","values","min","undefined","Number","parseFloat","max","handleClick","menu","product","productMap","unique","Set","data"],"mappings":"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","sourcesContent":["import React, { useState } from 'react'\r\n\r\nimport Card from 'antd/lib/card'\r\nimport Empty from 'antd/lib/empty'\r\nimport Input from 'antd/lib/input'\r\nimport Form from 'antd/lib/form'\r\nimport Button from 'antd/lib/button'\r\nimport Menu from 'antd/lib/menu'\r\nimport Dropdown from 'antd/lib/dropdown'\r\nimport DownOutlined from '@ant-design/icons/DownOutlined'\r\n\r\nconst { Search } = Input\r\n\r\nexport default function SearchFilterMapComponent(props) {\r\n    const [searchParam, setParam] = useState('')\r\n    const [minNum, setMin] = useState(0)\r\n    const [maxNum, setMax] = useState(0)\r\n    const [selectedCategory, setCategory] = useState('')\r\n\r\n    //Handles the combination of Search and Filtering\r\n    const SearchFilterMap = (item, searchParam, minRange, maxRange, selectedCategory) => {\r\n        //handles if somehow item has no data, as usestate is an empty array by default\r\n        if (item.length === 0) {\r\n            return (\r\n                <Card.Grid>\r\n                    <Empty />\r\n                </Card.Grid>\r\n            )\r\n        }\r\n        return item.map((item, index) => {\r\n            if ((item.title.toLowerCase()).includes(searchParam.toLowerCase())) {// lowercases both title and search value, and searches by a partial word not by whole word\r\n                if(item.category === selectedCategory || selectedCategory === \"\") {\r\n                    //If price is (greater than or equal) minimum number AND (price is less than or equal to maximum number OR max range is not set)\r\n                    if (item.price >= minRange && (item.price <= maxRange || maxRange === 0)) {\r\n                        return (\r\n                            <Card.Grid key={index}>\r\n                                <img style={{ width: \"100%\" }} alt=\"example\" src={item.image} />\r\n                                <p><strong>{item.title}</strong></p>\r\n                                <p>{\"$\" + item.price.toFixed(2)}</p> {/* Integer must have 2 decimal spaces to look better */}\r\n                                <p>{item.category.charAt(0).toUpperCase() + item.category.slice(1)}</p> {/* Capitalize First Letter */}\r\n                                <p>{item.description}</p>\r\n                            </Card.Grid>\r\n                        )\r\n                    } else { \r\n                        return null \r\n                    }\r\n                } else {\r\n                    return null\r\n                }\r\n            } else {\r\n                return null\r\n            }\r\n        })\r\n    }\r\n\r\n    //Handles search by title\r\n    const onSearch = value => setParam(value);\r\n\r\n    //Handles Product Price filter after submitting\r\n    const onFinish = (values) => {\r\n        if (values.min === undefined || values.min === \"\") {\r\n            setMin(0)//sets a num if left blank, to prevent errors\r\n        } else {\r\n            setMin(Number(parseFloat(values.min)))//sets product's lowest value, decimal for precise filter\r\n        }\r\n        if (values.max === undefined || values.max === \"\") {\r\n            setMax(0)//sets a num if left blank, to prevent errors\r\n        } else {\r\n            setMax(Number(parseFloat(values.max)))//sets product's highest value, decimal for precise filter\r\n        }\r\n    }\r\n\r\n    \r\n    // Functions for Dropdown--------------------------------------------------------------------------------------------->\r\n    const handleClick = (value) => {\r\n        setCategory(value)\r\n    }\r\n\r\n    const menu = (product) => {\r\n        return (\r\n            <Menu>\r\n                { productMap(product)}\r\n            </Menu>\r\n        )\r\n    }\r\n\r\n    //Creates a unique/distinct(non-duplicate) list of categories so that I can then filter by those unique categories\r\n    const productMap = (item) => {\r\n        const unique = [...new Set(item.map(item => item.category))];\r\n\r\n        return unique.map((item, index) => {\r\n            return (\r\n                <Menu.Item key={index} onClick={() => handleClick(item)}>\r\n                    <div>\r\n                        {item}\r\n                    </div>\r\n                </Menu.Item>\r\n            )\r\n        })\r\n    }\r\n    // Functions for Dropdown--------------------------------------------------------------------------------------------->\r\n\r\n\r\n    if (props.data === undefined) {\r\n        return (\r\n            <Empty />\r\n        )\r\n    } else {\r\n        return (\r\n            <div className=\"card\">\r\n                <Search className=\"search-bar\" placeholder=\"Search By Name\" onSearch={onSearch} style={{ width: \"25%\" }} />\r\n\r\n                <Form className=\"filter-price\" layout=\"inline\" onFinish={onFinish}>\r\n                    <Form.Item name=\"min\">\r\n                        <Input placeholder=\"Minimum Product Range\" />\r\n                    </Form.Item>\r\n                    <Form.Item name=\"max\">\r\n                        <Input placeholder=\"Maximum Product Range\" />\r\n                    </Form.Item>\r\n                    <Button type=\"primary\" htmlType=\"submit\">Filter by Price</Button>\r\n                </Form>\r\n\r\n                <Dropdown overlay={menu(props.data)}>\r\n                    <button className=\"ant-dropdown-link\" >\r\n                        Hover me <DownOutlined />\r\n                    </button>\r\n                </Dropdown>\r\n\r\n                <Card className=\"card-grid\" title=\"Card Title\">\r\n                    {SearchFilterMap(props.data, searchParam, minNum, maxNum, selectedCategory)}\r\n                </Card>\r\n            </div>\r\n        )\r\n    }\r\n}"]},"metadata":{},"sourceType":"module"}